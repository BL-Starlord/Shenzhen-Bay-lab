fit <- fit2
qqPlot(fit,id.n=5)
hist(rstudent(fit))
fit <- fit3
qqPlot(fit,id.n=5)
hist(rstudent(fit))
fit <- fit1
residualPlots(fit, tests=FALSE)
crPlots(fit)
fit <- fit2
residualPlots(fit, tests=FALSE)
crPlots(fit)
fit <- fit3
residualPlots(fit, tests=FALSE)
crPlots(fit)
fit1_temp <- lm(brozek~ neck + abdom + hip + I(hip^2) + forearm + wrist, data = fit_train1)
fit <- fit1_temp
residualPlots(fit, tests=FALSE)
crPlots(fit)
fit2_temp <- lm(brozek~ neck + abdom + hip + I(hip^2) + wrist, data = fit_train2)
fit3_temp <- lm(brozek~ neck + abdom + hip + I(hip^2), data = fit_train3)
fit1 <- fit1_temp
fit2 <- fit2_temp
fit3 <- fit3_temp
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets2
predictions <- predict(fit3, newdata=select(Test, -brozek))
mse_bestsubets3 <- mean((predictions - TestResponses)^2)
mse_bestsubets3
fit_simple <- lm(brozek~ ., data = fit_train1)
predictions <- predict(fit_simple, newdata=select(Test, -brozek))
mse_bestsubets <- mean((predictions - TestResponses)^2)
mse_bestsubets
summary(fit_simple)
summary(fit1)
summary(fit2)
summary(fit3)
comparing_table <- data.frame(
Fit_name = c("fit1_hypothesis", "fit1", "fit_simple"),
Rsquared = c(0.7425, 0.7443, 0.7424),
Adj_Rsquared = c(0.7303, 0.7308, 0.733),
Prediction_mse = c(16.65541, 17.99049, 16.66936)
)
kable(comparing_table)
#influenceIndexPlot(fit1_hypothesis)
#residualPlots(fit1_hypothesis, tests=FALSE)
#influenceIndexPlot(fit1)
residualPlots(fit1, tests=FALSE)
#influenceIndexPlot(fit_simple)
residualPlots(fit_simple, tests=FALSE)
# p1 <- qplot(neck,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p2 <-  qplot(chest,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p3 <-  qplot(abdom,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p4 <-  qplot(hip,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p5 <-  qplot(thigh,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p6 <-  qplot(knee,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p7 <-  qplot(ankle,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p8 <-  qplot(biceps,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p9 <-  qplot(forearm,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# p10 <-  qplot(wrist,brozek,data = Clean_Train, geom = c('point')) + stat_smooth(method='lm')
# combined <-grid.arrange(p1, p2,p3,p4,p5,p6,p7,p8,p9,p10 ,ncol=5)
x = select(fit_train1, c(neck, abdom, hip, forearm, wrist))
x=as.matrix(x)
new_col <- x[, 3]^2
# Insert the new column at position 4
x <- cbind(x[, 1:3], new_col, x[, 4:5])
y = select(fit_train1, brozek)
y=as.matrix(y)
ridge=glmnet(x,y, alpha=0)
ridge.cv=cv.glmnet(x,y, alpha=0)
ridge.cv$lambda.min ## The best lambda, estimated by Cross Validation.
ridge.cv$lambda.1se ## lambda which is one standard error from the best.
plot(ridge.cv)
xnew = select(Test, c(neck, abdom, hip, forearm, wrist))
xnew=as.matrix(xnew)
new_col <- xnew[, 3]^2
# Insert the new column at position 4
xnew <- cbind(xnew[, 1:3], new_col, xnew[, 4:5])
ridge.prediction1 = predict(ridge.cv, xnew, s = "lambda.1se")
ridge.prediction2 = predict(ridge.cv, xnew, s = "lambda.min")
mse_ridge1 <- mean((ridge.prediction1 - TestResponses)^2)
mse_ridge2 <- mean((ridge.prediction2 - TestResponses)^2)
mse_ridge1
mse_ridge2
knitr::opts_chunk$set(echo = TRUE)
#This is for testing whether 43 is removable
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train_temp <- Clean_Train[-c(33,139),]
rownames(fit_train_temp) <- 1:nrow(fit_train_temp)
fit1 <- lm(brozek~ neck + abdom + hip + forearm + wrist, data = fit_train_temp)
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
fit1 <- lm(brozek~ neck + abdom + hip + forearm + wrist, data=Clean_Train)
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train_temp <- Clean_Train[-c(33),]
rownames(fit_train_temp) <- 1:nrow(fit_train_temp)
fit1 <- lm(brozek~ neck + abdom + hip + forearm + wrist, data = fit_train_temp)
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
fit_train1 <- fit_train_temp
knitr::opts_chunk$set(echo = TRUE)
#This is for testing whether 43 is removable
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train_temp <- Clean_Train[-c(33,139),]
rownames(fit_train_temp) <- 1:nrow(fit_train_temp)
fit1 <- lm(brozek~ neck + abdom + hip + forearm + wrist, data = fit_train_temp)
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
influencePlot(fit1)
influenceIndexPlot(fit1)
knitr::opts_chunk$set(echo = TRUE)
fit1 <- lm(brozek~ neck + abdom + hip + forearm + wrist, data=Clean_Train)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data=Clean_Train)
fit3 <- lm(brozek~ neck + abdom + hip, data=Clean_Train)
knitr::opts_chunk$set(echo = TRUE)
influencePlot(fit1)
influenceIndexPlot(fit1)
knitr::opts_chunk$set(echo = TRUE)
#This is for fit2
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data=Clean_Train)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train2 <- Clean_Train[-c(33,35),]
rownames(fit_train2) <- 1:nrow(fit_train2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data = fit_train2)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
#This is for fit2
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data=Clean_Train)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train2 <- Clean_Train[-c(33,35),]
rownames(fit_train2) <- 1:nrow(fit_train2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data = fit_train2)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
fit <- fit1
qqPlot(fit,id.n=5)
knitr::opts_chunk$set(echo = TRUE)
hist(rstudent(fit))
knitr::opts_chunk$set(echo = TRUE)
#This is for fit2
influencePlot(fit2)
influenceIndexPlot(fit2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data=Clean_Train)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train2 <- Clean_Train[-c(33,35),]
rownames(fit_train2) <- 1:nrow(fit_train2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data = fit_train2)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
#This is the code for fit2
#influencePlot(fit2)
#influenceIndexPlot(fit2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data=Clean_Train)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train2 <- Clean_Train[-c(33,35),]
rownames(fit_train2) <- 1:nrow(fit_train2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data = fit_train2)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
##
fit_train2 <- Clean_Train[-c(33,36),]
rownames(fit_train2) <- 1:nrow(fit_train2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data = fit_train2)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
#This is the code for fit2
#influencePlot(fit2)
#influenceIndexPlot(fit2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data=Clean_Train)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
fit_train2 <- Clean_Train[-c(33,35),]
rownames(fit_train2) <- 1:nrow(fit_train2)
fit2 <- lm(brozek~ neck + abdom + hip + wrist, data = fit_train2)
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
mse_bestsubets2
knitr::opts_chunk$set(echo = TRUE)
fit2_temp <- lm(brozek~ neck + abdom + hip + I(hip^2) + wrist, data = fit_train2)
fit1 <- fit1_temp
fit2 <- fit2_temp
knitr::opts_chunk$set(echo = TRUE)
anova(fit1,fit2)
knitr::opts_chunk$set(echo = TRUE)
predictions <- predict(fit1, newdata=select(Test, -brozek))
mse_bestsubets1 <- mean((predictions - TestResponses)^2)
mse_bestsubets1
predictions <- predict(fit2, newdata=select(Test, -brozek))
mse_bestsubets2 <- mean((predictions - TestResponses)^2)
mse_bestsubets2
predictions <- predict(fit3, newdata=select(Test, -brozek))
mse_bestsubets3 <- mean((predictions - TestResponses)^2)
mse_bestsubets3
knitr::opts_chunk$set(echo = TRUE)
summary(fit1)
knitr::opts_chunk$set(echo = TRUE)
summary(fit2)
knitr::opts_chunk$set(echo = TRUE)
summary(fit1)
summary(fit2)
knitr::opts_chunk$set(echo = TRUE)
fit_simple <- lm(brozek~ ., data = fit_train2)
predictions <- predict(fit_simple, newdata=select(Test, -brozek))
mse_bestsubets <- mean((predictions - TestResponses)^2)
mse_bestsubets
knitr::opts_chunk$set(echo = TRUE)
x = select(fit_train2, c(neck, abdom, hip, wrist))
x=as.matrix(x)
new_col <- x[, 3]^2
# Insert the new column at position 4
x <- cbind(x[, 1:3], new_col, x[, 4])
y = select(fit_train1, brozek)
y=as.matrix(y)
ridge=glmnet(x,y, alpha=0)
knitr::opts_chunk$set(echo = TRUE)
x = select(fit_train2, c(neck, abdom, hip, wrist))
x=as.matrix(x)
new_col <- x[, 3]^2
# Insert the new column at position 4
x <- cbind(x[, 1:3], new_col, x[, 4])
y = select(fit_train2, brozek)
y=as.matrix(y)
ridge=glmnet(x,y, alpha=0)
ridge.cv=cv.glmnet(x,y, alpha=0)
ridge.cv$lambda.min ## The best lambda, estimated by Cross Validation.
ridge.cv$lambda.1se ## lambda which is one standard error from the best.
plot(ridge.cv)
xnew = select(Test, c(neck, abdom, hip, forearm, wrist))
xnew=as.matrix(xnew)
new_col <- xnew[, 3]^2
# Insert the new column at position 4
xnew <- cbind(xnew[, 1:3], new_col, xnew[, 4:5])
ridge.prediction1 = predict(ridge.cv, xnew, s = "lambda.1se")
knitr::opts_chunk$set(echo = TRUE)
x = select(fit_train2, c(neck, abdom, hip, wrist))
x=as.matrix(x)
new_col <- x[, 3]^2
# Insert the new column at position 4
x <- cbind(x[, 1:3], new_col, x[, 4])
y = select(fit_train2, brozek)
y=as.matrix(y)
ridge=glmnet(x,y, alpha=0)
ridge.cv=cv.glmnet(x,y, alpha=0)
ridge.cv$lambda.min ## The best lambda, estimated by Cross Validation.
ridge.cv$lambda.1se ## lambda which is one standard error from the best.
plot(ridge.cv)
xnew = select(Test, c(neck, abdom, hip, wrist))
xnew=as.matrix(xnew)
new_col <- xnew[, 3]^2
# Insert the new column at position 4
xnew <- cbind(xnew[, 1:3], new_col, xnew[, 4])
ridge.prediction1 = predict(ridge.cv, xnew, s = "lambda.1se")
ridge.prediction2 = predict(ridge.cv, xnew, s = "lambda.min")
mse_ridge1 <- mean((ridge.prediction1 - TestResponses)^2)
mse_ridge2 <- mean((ridge.prediction2 - TestResponses)^2)
mse_ridge1
mse_ridge2
knitr::opts_chunk$set(echo = TRUE)
summary(ridge)
knitr::opts_chunk$set(echo = TRUE)
summary(ridge)
deviance(ridge)
knitr::opts_chunk$set(echo = TRUE)
summary(ridge)
ridge.nulldev
knitr::opts_chunk$set(echo = TRUE)
summary(ridge)$r.squared
knitr::opts_chunk$set(echo = TRUE)
rsq <- summary(ridge)$r.squared
knitr::opts_chunk$set(echo = TRUE)
summary(ridge)
knitr::opts_chunk$set(echo = TRUE)
rsq <- summary(ridge)$r.squared
knitr::opts_chunk$set(echo = TRUE)
class(ridge)
knitr::opts_chunk$set(echo = TRUE)
class(ridge)
rsq <- summary(ridge)$r.squared
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge, newx = x)
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
y_pred
y
knitr::opts_chunk$set(echo = TRUE)
summary(ridge.cv)
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.1se")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.1se")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.1se")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.min")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
knitr::opts_chunk$set(echo = TRUE)
x = select(fit_train2, c(neck, abdom, hip, wrist))
x=as.matrix(x)
new_col <- x[, 3]^2
# Insert the new column at position 4
x <- cbind(x[, 1:3], new_col, x[, 4])
y = select(fit_train2, brozek)
y=as.matrix(y)
ridge=glmnet(x,y, alpha=0)
ridge.cv=cv.glmnet(x,y, alpha=0)
ridge.cv$lambda.min ## The best lambda, estimated by Cross Validation.
ridge.cv$lambda.1se ## lambda which is one standard error from the best.
plot(ridge.cv)
xnew = select(Test, c(neck, abdom, hip, wrist))
xnew=as.matrix(xnew)
new_col <- xnew[, 3]^2
# Insert the new column at position 4
xnew <- cbind(xnew[, 1:3], new_col, xnew[, 4])
ridge.prediction1 = predict(ridge.cv, xnew, s = "lambda.1se")
ridge.prediction2 = predict(ridge.cv, xnew, s = "lambda.min")
mse_ridge1 <- mean((ridge.prediction1 - TestResponses)^2)
mse_ridge2 <- mean((ridge.prediction2 - TestResponses)^2)
mse_ridge1
mse_ridge2
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.1se")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.min")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
n <- nobs(ridge.cv$call$data)
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.1se")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.min")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
knitr::opts_chunk$set(echo = TRUE)
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.1se")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
# Get the predicted values
y_pred <- predict(ridge.cv, newx = x,s = "lambda.min")
# Calculate the total sum of squares (TSS) of y
tss <- sum((y - mean(y))^2)
# Calculate the residual sum of squares (RSS) of y
rss <- sum((y - y_pred)^2)
# Calculate the R-squared value
rsq <- 1 - rss/tss
rsq
library(readxl)
library(spdep)
library(rgdal)
library(spdep)
install.packages('spDataLarge',
repos='https://nowosad.github.io/drat/', type='source')
library(sf)
install.packages("sf")
library(spdep)
> install.packages("sf")
install.packages("sf")
library(sf)
library(spdep)
install.packages("sf")
install.packages(sf)
library(spdep)
library(rgdal)
install.packages("spdep")
install.packages("gdal")
install.packages("sp")
install.packages("sp")
library(sp)
install.packages("spatialreg")
library(spatialreg)
install.packages("gdal")
library(readxl)
setwd("/Users/ryan/Documents/GitHub/Shenzhen Bay lab/spike_protein_3structures_markerd_with_variants_from_cncb")
data <- read_excel("6vxx_variants.xls")
library(cluster)
data_mutation<-data[1:972,10]
k <- 3  # 聚类数目
kmeans_result <- kmeans(data_mutation, centers = k)
# 获取聚类结果
cluster_labels <- kmeans_result$cluster
clusplot(data_mutation, cluster_labels, color = TRUE, shape = TRUE)
cluster_labels
warnings()
library(readxl)
setwd("/Users/ryan/Documents/GitHub/Shenzhen Bay lab/spike_protein_3structures_markerd_with_variants_from_cncb")
data <- read_excel("6vxx_variants.xls")
library(cluster)
data_mutation<-data[1:972,10]
k <- 3  # 聚类数目
kmeans_result <- kmeans(data_mutation, centers = k)
# 获取聚类结果
cluster_labels <- kmeans_result$cluster
clusplot(data_mutation, cluster_labels, color = TRUE)
cluster_labels
merged_data <- cbind(data_mutation, cluster_labels)
library(readxl)
setwd("/Users/ryan/Documents/GitHub/Shenzhen Bay lab/spike_protein_3structures_markerd_with_variants_from_cncb")
data <- read_excel("6vxx_variants.xls")
library(cluster)
data_mutation<-data[1:972,10]
k <- 3  # 聚类数目
kmeans_result <- kmeans(data_mutation, centers = k)
# 获取聚类结果
cluster_labels <- kmeans_result$cluster
clusplot(data_mutation, cluster_labels, color = TRUE)
merged_data <- cbind(data_mutation, cluster_labels)
View(merged_data)
high_mutation_data <- merged_data[grep("2|3", merged_data$cluster_labels), ]
View(high_mutation_data)
install.packages("dbscan")
install.packages("dbscan")
install.packages("dbscan")
install.packages("dbscan")
install.packages("dbscan")
